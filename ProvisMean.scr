// Local (class) variables
    var nVars;       // number of variables
    var nCases;      // number of cases processed so far
    array means[0];  // array of means
    array mxProd[0]; // array of centered cross products (lower triangular part of
                     // the symmetric matrix elements), order of elements
                     // m[0,0], m[1,0], m[1,1], m[2,0], m[2,1], m[2,2], etc.

   // Initialize and allocate local (class) variables
    function Init( n ) // n is number of variables
    {
        set nVars = n;
        set nCases = 0;

        // Allocate array of means
        realloc (means)( nVars )(0);        // set each member = 0    [O.K.]

        // Allocate array of centered cross products of length nVars*(nVars+1)/2
        var length = nVars*(nVars+1)/2;
        realloc (mxProd) ( length )(0);     // set each member = 0     [O.K.]
    }

    // Process one case (vector) of data 
    function AddCase( nCases, array:vData )
    {
        // Update number of cases
        PlusPlus(nCases);       // nCases++   [O.K.]
        // write#("nCases={0}",nCases);    //debug  [O.K.]
        // Update matrix of cross products (see below)
        UpdateXX( vData );
   
        // Update means
        var ratio = 1.0 / nCases;

        var incr = 0;
        for ( iVar, 0, nVars )    // increment by default = 1    [O.K.]
        {
            set incr = ( vData[ iVar ] - means[ iVar ] ) * ratio;   // meansArray is changed on means  [O.K.]
            set means[ iVar ] =   means[ iVar ] + incr;
        }
       
    }
 
    // Update the symmetric matrix of centered cross products
    // something weird: in my sample nVar=5,  length mxProd=15 and index iX in mxProd from 0 to 5   [O.K.]
    //                                                        // not all array mxProd will be filled
    function UpdateXX(array:vData)
    {
        var iX = 0;

        for ( iRow, 0, nVars )    // increment by default = 1
        {
            for ( iCol, 0, iRow )
            {
                PlusPlus(iX);
                // write#("iX={0}",iX);      debug  [O.K.]
                set mxProd[ iX ] =   mxProd[ iX ] + vData[ iRow ] * vData[ iCol ];
            }
        }
    } 
    
    // my addition to calculate  results   [O.K.]
    Init(5);

    array vData[nVars] = 0;    // I think length of vData = nVars;
    
    //set   vData[0] = ;                  
    //set   vData[1] = ;
    //...
    // or 
    //array vData[] = {member1,member2,... };
    // or fill from file
    AddCase(nCases)(vData);
    writearray(means);   // print means array
    writearray(mxProd);   // print results
    
